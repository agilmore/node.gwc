
var sample_data = new Array(0x5B,0x37,0x31,0x27,0x41,0x67,0x70,0x62,0x10,0x81,0xF,0xB6,0xAF,0x63,0xD2,0xCE,0x1,0x1,0x0,0x60,0x1,0x0,0x0,0x16,0x83,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xC3,0x5,0x55,0x44,0x50,0x48,0x43,0x58,0x79,0x69,0x6E,0x2E,0x63,0x6C,0x6F,0x75,0x64,0x2E,0x62,0x69,0x73,0x68,0x6F,0x70,0x73,0x74,0x6F,0x6E,0x2E,0x6E,0x65,0x74,0x83,0x49,0x50,0x50,0x84,0x6C,0x46,0x6D,0x30,0x11,0xD1,0x3E,0x40,0x97,0x9,0x9D,0x5F,0x8A,0x44,0x20,0xF6,0x4,0x27,0x22,0x32,0x5D,0xF,0x92,0x80,0x4A,0x4A,0x45,0xB9,0xE,0xB5,0x6E,0x4D,0xCC,0xB,0x6,0xAA,0xF,0x77,0xAC,0x62,0x66,0xCA,0x18,0x62,0x4D,0x87,0x77,0x14,0x22,0xB4,0x1B,0xE4,0x79,0xCA,0x18,0x7D,0x0,0x83,0x30,0xCA,0x18,0xDB,0x6B,0xF2,0xD5,0xDA,0x8,0x7B,0xE3,0xFB,0x54,0xCA,0x18,0x44,0x20,0xEA,0xC9,0x70,0x76,0xE,0xC1,0x6C,0xCD,0xCA,0x18,0x18,0x2,0x4E,0x89,0x5E,0x9D,0x62,0x43,0xEA,0x1F,0xE2,0x6E,0x18,0x59,0xD9,0x55,0x8C,0x59,0x18,0xFF,0xF,0x44,0x88,0x69,0x60,0x1C,0x20,0x57,0x96,0x93,0x65,0x6F,0xF,0x30,0xCA,0x18,0x42,0x1B,0x8B,0x4F,0x86,0x44,0x46,0xBD,0xDD,0x6B,0xD8,0x21,0xD8,0x2D,0x2B,0xD4,0x4A,0x10,0x4C,0x17,0xCF,0x11,0x0,0x7F,0xAD,0x3,0xA5,0xF,0x4F,0x89,0xDD,0x4D,0xF2,0xF,0xCA,0x18,0x71,0x9F,0x1D,0xE2,0xCA,0x18,0xDA,0x2B,0x1E,0x54,0xCA,0x18,0x47,0xCC,0x38,0x6B,0x2,0x68,0x43,0xF9,0xF1,0x3,0x2,0x9,0x7E,0x13,0xBD,0x2F,0xCA,0x18,0x7D,0xCD,0x41,0x9F,0xCA,0x18,0x3D,0x23,0x3F,0xF9,0x6,0x8C,0x63,0x2B,0x40,0x7F,0x7,0x29,0x45,0xF4,0xDB,0x50,0x88,0x15,0x4B,0x6D,0xE1,0x58,0xC9,0x26,0xAE,0x64,0x59,0xB,0x88,0x69,0x7D,0x1F,0x50,0xC9,0xCA,0x18,0x4A,0x32,0x26,0x2F,0x55,0x65,0x18,0x5D,0xA3,0x9F,0x41,0x48,0x76,0xE9,0x71,0x8D,0xA6,0x38,0x7D,0xE,0x21,0x33,0xCA,0x18,0xAE,0x40,0xA3,0xDE,0xF,0x65,0x6F,0x67,0x34,0x20,0xCA,0x18,0x45,0xF8,0x97,0xBD,0xE1,0x23,0x47,0xBE,0xBC,0xD2,0xC2,0x82,0xB6,0xA9,0xB7,0x2A,0xCA,0x18,0x51,0xE9,0x54,0x2B,0x91,0x10,0xB8,0x9B,0xF4,0x71,0x7E,0x47,0x5D,0x1,0xDC,0xA6,0x8F,0x8);

var sample_buffer = new Buffer(sample_data);

var GnutellaMessage = require('./gnutella_message.js');

var udp_sock = require('dgram').createSocket('udp4', function(msg, rinfo){
	console.log(rinfo);
	try{
		var gmes = GnutellaMessage.decode(msg);
		console.log(gmes.toString());
		
		var ggep_blocks = gmessage.getGGEPBlocks();
		for(var i in ggep_blocks){
			switch(ggep_blocks[i].id){
				case 'SCP':
					if('body' in ggep_blocks[i]){
						if(ggep_blocks[i].body[0] == 1){
							console.log("Wants Ultrapeers");
						}
						else{
							console.log("Wants Leafs");
						}
					}
					else{
						console.log("Wants Leafs");
					}
					break;
			}
		}
		
		var pong = new GnutellaMessage(
			gmes.getGUID(),
			GnutellaMessage.TYPES.PONG,
			new Buffer([57, 5, 127, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0])
		);
		
		var udphc = {id: 'UDPHC', compression: false, body: new Buffer("gil.homelinux.net")};
		pong.addGGEPBlock(udphc);
		
		var ipp = {id: 'IPP', compression: false, body: new Buffer([1,3,3,7,57,5])};
		pong.addGGEPBlock(ipp);
		
		var pong_buf = GnutellaMessage.encode(pong);
		//console.log(pong_buf);
		udp_sock.send(pong_buf, 0, pong_buf.length, rinfo.port, rinfo.address);
		
		console.log(GnutellaMessage.decode(pong_buf).toString());
	}
	catch(e){
		console.error(e);
	}
});
udp_sock.bind(1337);


console.log(sample_buffer);
var gmessage = GnutellaMessage.decode(sample_buffer);
console.dir(gmessage);

var new_buffer = GnutellaMessage.encode(gmessage);
console.log(new_buffer);

var compare_buffer = function(a, b){
	if(sample_buffer.length == new_buffer.length){
		for(var i = 0; i < a.length; i++){
			if(a[i] != b[i]) throw i;
		}
		return true;
	}
	return false;
};

try{
	console.log(compare_buffer(sample_buffer, new_buffer));
}
catch(e){
	console.dir(e);
	console.log("Failed at: " + e);
	console.log(sample_buffer.slice(e-2));
	console.log(new_buffer.slice(e-2));
}

//console.log(gmessage);
var ggep_blocks = gmessage.getGGEPBlocks();
for(var i in ggep_blocks){
	switch(ggep_blocks[i].id){
		case 'UDPHC':
			console.log('UDPHC: ' + ggep_blocks[i].body.toString());
			break;
		case 'IPP':
			console.log('IPP: ');
			for(var b = 0; b < ggep_blocks[i].body.length; ){
				var ip = 	ggep_blocks[i].body.readUInt8(b) + "." + 
							ggep_blocks[i].body.readUInt8(b++) + "." + 
							ggep_blocks[i].body.readUInt8(b++) + "." + 
							ggep_blocks[i].body.readUInt8(b++);
				var port = ggep_blocks[i].body.readUInt16LE(b++);
				b++;
				console.log("\t" + ip + ':' + port);
			}
			break;
		case 'PHC':
			require('zlib').gunzip(ggep_blocks[i].body, function(error, result){
				console.log('PHC: ');
				console.log(result.toString());
			});
			break;
	}
}